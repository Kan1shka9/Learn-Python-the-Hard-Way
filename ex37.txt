### Data Types ###
True	
False	
None	
strings	
numbers	
floats	
lists -> j = [1,2,3,4]	
dicts -> e = {'x': 1, 'y': 2}	

### String Escape Sequences ###
\\
\'
\"
\a -> Bell
\b
\f -> Formfeed
\n 
\r -> Carriage
\t
\v

### String Formats ###
%d	
%i	
%o	
%u	
%x	
%X	
%e	
%E	
%f	
%F	
%g -> Either %f or %e, whichever is shorter
%G -> Same as %g but uppercase
%c	
%r -> Repr format (debugging format)
%s	
%% -> A percent sign

### Operators ###
+
-
*
** -> Power of -> 2 ** 4 == 16
/
// -> Floor division -> 2 // 4.0 == 0.0
%
<	
>	
<=	
>=	
==	
!=	
<>	
( ) -> Parenthesis -> len('hi') == 2
[ ] -> List brackets -> [1,3,4]
{ } -> Dict curly braces -> {'x': 5, 'y': 10}
@ -> At (decorators) -> @classmethod
,	
:	
. -> Dot -> self.x = 10
=	
;	
+=	
-=	
*=	
/=	
//= -> Floor divide and assign -> x = 1; x //= 2
%=	
**=

### Keywords ###
and	
as -> Part of the with-as statement -> with X as Y: pass
assert -> Assert (ensure) that something is true -> assert False, "Error!"
break	
class -> Define a class -> class Person(object)
continue -> Don't process more of the loop, do it again -> while True: continue
def -> Define a function -> def X(): pass
del -> Delete from dictionary -> del X[Y]
elif	
else
except -> If an exception happens, do this -> except ValueError, e: print e
exec -> Run a string as Python -> exec 'print "hello"'
finally -> Exceptions or not, finally do this no matter what -> finally: pass
for -> Loop over a collection of things -> for X in Y: pass
from -> Importing specific parts of a module -> import X from Y
global	
if	
import	
in -> Part of for-loops. Also a test of X in Y -> for X in Y: pass also 1 in [1] == True
is -> Like == to test equality -> 1 is 1 == True
lambda -> Create a short anonymous function -> s = lambda y: y ** y; s(3)
not	
or	
pass -> This block is empty -> def empty(): pass
print	
raise -> Raise an exception when things go wrong -> raise ValueError("No")
return	
try -> Try this block, and if exception, go to except -> try: pass
while -> While loop -> while X: pass
with -> With an expression as a variable do -> with X as Y: pass
yield -> Pause here and return to caller -> def X(): yield Y; X().next()
